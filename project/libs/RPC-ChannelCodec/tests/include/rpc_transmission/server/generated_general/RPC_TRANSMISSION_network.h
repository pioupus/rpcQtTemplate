
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   IMPORTANT: The following functions must be implemented by YOU.
   They are required for the RPC to work.
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

/* This file has been automatically generated by RPC-Generator
   https://github.com/Crystal-Photonics/RPC-Generator
   You should not modify this file manually. */

#ifndef RPC_TRANSMISSION_NETWORK_H
#define RPC_TRANSMISSION_NETWORK_H

#include "RPC_types.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

void RPC_TRANSMISSION_message_start(size_t size);
/*  This function is called when a new message starts. {size} is the number of
    bytes the message will require. In the implementation you can allocate  a
    buffer or write a preamble. The implementation can be empty if you do not
    need to do that. */

void RPC_TRANSMISSION_message_push_byte(unsigned char byte);
/* Pushes a byte to be sent via network. You should put all the pushed bytes
   into a buffer and send the buffer when RPC_TRANSMISSION_message_commit is called. If you run
   out of buffer space you can send multiple partial messages as long as the
   other side puts them back together. */

RPC_RESULT RPC_TRANSMISSION_message_commit(void);
/* This function is called when a complete message has been pushed using
   RPC_TRANSMISSION_message_push_byte. Now is a good time to send the buffer over the network,
   even if the buffer is not full yet. You may also want to free the buffer that
   you may have allocated in the RPC_TRANSMISSION_message_start function.
   RPC_TRANSMISSION_message_commit should return RPC_TRANSMISSION_SUCCESS if the buffer has been successfully
   sent and RPC_TRANSMISSION_FAILURE otherwise. */

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   You need to define 4 mutexes to implement the RPC_TRANSMISSION_mutex_* functions below.
   See RPC_TRANSMISSION_types.h for a definition of RPC_TRANSMISSION_mutex_id.
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
   
void RPC_TRANSMISSION_mutex_init(void);
/* Initializes all rpc mutexes. */

void RPC_TRANSMISSION_mutex_lock(RPC_mutex_id mutex_id);
/* Locks the mutex. If it is already locked it yields until it can lock the mutex. */

void RPC_TRANSMISSION_mutex_unlock(RPC_mutex_id mutex_id);
/* Unlocks the mutex. The mutex is locked when the function is called. */

char RPC_TRANSMISSION_mutex_lock_timeout(RPC_mutex_id mutex_id);
/* Tries to lock a mutex. Returns 1 if the mutex was locked and 0 if a timeout
   occured. The timeout length should be the time you want to wait for an answer
   before giving up. If the time is infinite a lost answer will get the calling
   thread stuck indefinitely. */
   
   
/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   The following functions's implementations are automatically generated.
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

void RPC_TRANSMISSION_Parser_init(void);
/* Initializes various states required for the RPC. Must be called before any
   other RPC_TRANSMISSION_* function. Must be called by the parser thread. */

void RPC_TRANSMISSION_Parser_exit(void);
/* Frees various states required for the RPC. Must be called after any
   other RPC_TRANSMISSION_* function */

RPC_SIZE_RESULT RPC_TRANSMISSION_get_answer_length(const void *buffer, size_t size);
/* Returns the (expected) length of the beginning of a (partial) message.
   If returnvalue.result equals RPC_TRANSMISSION_SUCCESS then returnvalue.size equals the
   expected size in bytes.
   If returnvalue.result equals RPC_TRANSMISSION_COMMAND_UNKNOWN then the buffer does not point
   to the beginning of a recognized message and returnvalue.size has no meaning.
   If returnvalue.result equals RPC_TRANSMISSION_COMMAND_INCOMPLETE then returnvalue.size equals
   the minimum number of bytes required to figure out the length of the message. */

void RPC_TRANSMISSION_parse_answer(const void *buffer, size_t size);
/* This function parses answer received from the network. {buffer} points to the
   buffer that contains the received data and {size} contains the number of bytes
   that have been received (NOT the size of the buffer!). This function will wake
   up RPC_TRANSMISSION_*-functions below that are waiting for an answer.
   Do not call this function with an incomplete message. Use RPC_TRANSMISSION_get_answer_length
   to make sure it is a complete message. */



#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* RPC_TRANSMISSION_NETWORK_H */
